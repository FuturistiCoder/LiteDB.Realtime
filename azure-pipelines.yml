trigger:
  branches:
    include:
    - master

  paths:
    exclude:
    - README.md

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macos-latest'
    windows:
      imageName: 'windows-latest'

pool:
  vmImage: '$(imageName)'
  timeoutInMinutes: 20

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

  - task: UseGitVersion@5
    inputs:
      versionSpec: '5.x'

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '3.1.x'

  - script: echo %Action%%BuildVersion%
    displayName: 'Set build version'
    env:
      Action: '##vso[build.updatebuildnumber]'
      BuildVersion: $(GitVersion.SemVer)
    condition: eq(variables['imageName'], 'windows-latest')


  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'SignKey.snk'

  - task: CopyFiles@2
    inputs:
      Contents: 'SignKey.snk'
      SourceFolder: '$(Agent.TempDirectory)'
      TargetFolder: './LiteDB.Realtime'

  - task: CopyFiles@2
    inputs:
      Contents: 'SignKey.snk'
      SourceFolder: '$(Agent.TempDirectory)'
      TargetFolder: './LiteDB.Realtime.Test'

  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: 'build'
      projects: '$(solution)'
      arguments: '-c $(buildConfiguration) -p:Version=$(GitVersion.SemVer)'

  - task: DotNetCoreCLI@2
    displayName: dotnet test
    inputs:
      command: 'test'
      publishTestResults: true
      arguments: -c $(buildConfiguration) --no-build /p:CollectCoverage=true;CoverletOutputFormat=cobertura;ExcludeByAttribute=Obsolete%2cGeneratedCode%2cCompilerGenerated

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '**/*.cobertura.xml'

  - task: DotNetCoreCLI@2
    displayName: dotnet pack
    inputs:
      command: 'pack'
      packagesToPack: '**/*.csproj'
      nobuild: true
      includesymbols: true
      buildProperties: SymbolPackageFormat=snupkg;Version=$(GitVersion.SemVer)

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'artifacts'
      publishLocation: 'Container'
    condition: eq(variables['imageName'], 'windows-latest')
